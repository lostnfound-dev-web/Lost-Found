DROP TABLE IF EXISTS AdminVerifiesItemStatus;
DROP TABLE IF EXISTS ItemStatus;
DROP TABLE IF EXISTS ReportItem;
DROP TABLE IF EXISTS Accepted;
DROP TABLE IF EXISTS Pending;
DROP TABLE IF EXISTS Status;
DROP TABLE IF EXISTS FoundItem;
DROP TABLE IF EXISTS LostItem;
DROP TABLE IF EXISTS Item;
DROP TABLE IF EXISTS FoundReport;
DROP TABLE IF EXISTS LostReport;
DROP TABLE IF EXISTS Report;
DROP TABLE IF EXISTS Admin;
DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS User;

-- 1. User + ISA
CREATE TABLE User (
UserID   INT AUTO_INCREMENT PRIMARY KEY,
Email    VARCHAR(255) NOT NULL UNIQUE,
Password VARCHAR(255) NOT NULL
);

CREATE TABLE Student (
UserID INT PRIMARY KEY,
FOREIGN KEY (UserID) REFERENCES User(UserID)
);

CREATE TABLE Admin (
UserID INT PRIMARY KEY,
FOREIGN KEY (UserID) REFERENCES User(UserID)
);

-- 2. Report + ISA
CREATE TABLE Report (
ReportID   INT AUTO_INCREMENT PRIMARY KEY,
ReportDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
UserID     INT NOT NULL,
FOREIGN KEY (UserID) REFERENCES Student(UserID)
);

CREATE TABLE LostReport (
ReportID INT PRIMARY KEY,
FOREIGN KEY (ReportID) REFERENCES Report(ReportID)
);

CREATE TABLE FoundReport (
ReportID INT PRIMARY KEY,
FOREIGN KEY (ReportID) REFERENCES Report(ReportID)
);

-- 3. Item + ISA
CREATE TABLE Item (
ItemID       INT AUTO_INCREMENT PRIMARY KEY,
Name         VARCHAR(255) NOT NULL,
Category     VARCHAR(100) NOT NULL,
Description  TEXT,
Photo        VARCHAR(255),
DateLost     DATE,
LocationLost VARCHAR(255)
);

CREATE TABLE LostItem (
ItemID INT PRIMARY KEY,
FOREIGN KEY (ItemID) REFERENCES Item(ItemID)
);

CREATE TABLE FoundItem (
ItemID INT PRIMARY KEY,
FOREIGN KEY (ItemID) REFERENCES Item(ItemID)
);

-- 4. Status + ISA
CREATE TABLE Status (
StatusID INT AUTO_INCREMENT PRIMARY KEY,
Label    VARCHAR(32) NOT NULL UNIQUE
);

CREATE TABLE Pending (
StatusID INT PRIMARY KEY,
FOREIGN KEY (StatusID) REFERENCES Status(StatusID)
);

CREATE TABLE Accepted (
StatusID INT PRIMARY KEY,
FOREIGN KEY (StatusID) REFERENCES Status(StatusID)
);

INSERT INTO Status(Label) VALUES ('Pending'), ('Accepted');

-- 5. Relationships
CREATE TABLE ReportItem (
ReportID INT PRIMARY KEY,
ItemID   INT NOT NULL,
FOREIGN KEY (ReportID) REFERENCES Report(ReportID),
FOREIGN KEY (ItemID)   REFERENCES Item(ItemID)
);

-- Current status of each item (1:1)
CREATE TABLE ItemStatus (
ItemID   INT PRIMARY KEY,
StatusID INT NOT NULL,
FOREIGN KEY (ItemID)   REFERENCES Item(ItemID),
FOREIGN KEY (StatusID) REFERENCES Status(StatusID)
);

-- Admin verifies the status 
CREATE TABLE AdminVerifiesItemStatus (
AdminID    INT NOT NULL,
ItemID     INT NOT NULL,
StatusID   INT NOT NULL,
VerifiedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (AdminID, ItemID, VerifiedAt),
FOREIGN KEY (AdminID)  REFERENCES Admin(UserID),
FOREIGN KEY (ItemID)   REFERENCES Item(ItemID),
FOREIGN KEY (StatusID) REFERENCES Status(StatusID)
);
